environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: 'cmd /E:ON /V:ON /C .\tools\appveyor\run_with_env.cmd'
    ANACONDA_TOKEN:
      secure: 4tBu5qS0545E1dJt/t1aKIjI84gUjMGy/VQj/CKqwYNMzwM51dCemTLEv4Xwhy54
    PROJECT_NAME: larch
    GITHUB_REPO_NAME: jpn--/larch
    PYPACKAGE: larch

  matrix:
    - PYTHON_VERSION: 3.7
      CONDA: C:\Miniconda37

version: '5.5.6.{build}'
image: Visual Studio 2015

# For testing only...
#skip_non_tags: true

platform:
  - x64

branches:
  only:
    - master
    - dev-a

init:
  - echo "begin init"
  - ps: if ($Env:PLATFORM -eq "x64") { $Env:CONDA = "${Env:CONDA}-x64" }
  - ps: Write-Host $Env:PYTHON_VERSION
  - ps: Write-Host $Env:CONDA
  - ps: Write-Host $Env:GITHUB_REPO_NAME
  - ps: Write-Host $Env:PLATFORM
  - ps: Write-Host $Env:APPVEYOR_REPO_TAG
  - ps: Write-Host $Env:APPVEYOR_REPO_TAG_NAME
  - ps: Write-Host $Env:APPVEYOR_REPO_NAME

install:
  - echo "begin install"
  # Make sure the compiler is accessible
  - '"%VS140COMNTOOLS%\..\..\VC\vcvarsall.bat" %PLATFORM%'

  # Load the conda root environment, configure and install some packages
  - '"%CONDA%\Scripts\activate.bat"'
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda install conda-build anaconda-client numpy cython conda-verify -c conda-forge
  # Install codecov tool for uploading coverage reports
  - pip install codecov coverage
  - conda config --append channels conda-forge
  - conda config --append channels jpn
  # Show conda info for debugging
  - conda info -a

  # Set the version info from the git tag
  - git fetch origin --tags
  - python tools\\gitversion.py > version.txt
  - set /P PROJECT_VERSION=<version.txt
  - python tools\\gitversion.py python > %PROJECT_NAME%\\version.py

build: off

test_script:
  - echo "begin test"
  - '"%CONDA%\Scripts\activate.bat"'
  - python tools\\gitversion.py
  # Build the package
  - "%CMD_IN_ENV% conda build conda-recipe -c conda-forge"

  # Install the package
  - conda install --use-local %PROJECT_NAME% -c conda-forge

  # Run the tests outside the source tree.
  # pushd "%HOMEPATH%" && (pytest %PROJECT_NAME% -v --detailed-errors --with-coverage --cover-package=%PROJECT_NAME% --cover-tests --cover-erase --cover-inclusive --cover-branches --cover-xml & popd)
  - pushd "%HOMEPATH%" && (pytest --pyargs %PROJECT_NAME% -v & popd)

after_test:
  # Copy the conda build to the home dir, such that it can be registerd as an artifact
  - move %CONDA%\conda-bld .

  # Upload coverage reports
  - 'codecov -f "%HOMEPATH%\coverage.xml"'

artifacts:
  # Files to be uploaded
  - path: 'conda-bld\win-*\*.tar.bz2'

on_success:
  - ECHO "Yep"

  # Upload to anaconda, with the correct label derived from the version tag.
  # This is virtually impossible with a normal dos batch script...
  # It also contains an incredibly clunky way to avoid build failure when anaconda writes
  # something harmless to stderr. The normal way does not work!
  # & anaconda $parameters 2>&1
  # Powershell should be called Powerhell!
  - ps:
      if (($Env:APPVEYOR_REPO_TAG -eq "true") -and
          ($Env:APPVEYOR_REPO_NAME -eq ${Env:GITHUB_REPO_NAME})) {
        $this_version_number = (${Env:APPVEYOR_REPO_TAG_NAME}).TrimStart("v");
        $tar_glob = ".\conda-bld\win-*\%PYPACKAGE%-$this_version_number-*.tar.bz2";
        Write-Host "tar_glob $tar_glob";
        if ($Env:APPVEYOR_REPO_TAG_NAME -like "*a*") {
          $anaconda_label = "alpha"
        } elseif ($Env:APPVEYOR_REPO_TAG_NAME -like "*b*") {
          $anaconda_label = "beta"
        } else {
          $anaconda_label = "main"
        };
        Write-Host "anaconda_label $anaconda_label";
        $parameters = '-t', "$Env:ANACONDA_TOKEN", 'upload', "$tar_glob", '-l',
                      "$anaconda_label", '--force', '--no-progress';
        & cmd /c 'anaconda 2>&1' $parameters;
      }